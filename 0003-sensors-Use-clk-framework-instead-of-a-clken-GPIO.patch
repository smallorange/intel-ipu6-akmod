From a5860d0afb5a35040beafb69445282d97e27ed0a Mon Sep 17 00:00:00 2001
From: Hans de Goede <hdegoede@redhat.com>
Date: Tue, 29 Nov 2022 15:06:23 +0100
Subject: [PATCH 3/7] sensors: Use clk-framework instead of a "clken" GPIO

Use the clk-framework to get a clk-provider reference and use
clk_prepare_enable() / clk_disable_unprepare() to control the clk.

This replace modelling the clock as a "clken" GPIO, which is not a valid
way to model it when the clk is e.g. generated by the clk-generator of
a TPS68470 PMIC.

This relies on the following upstream bugfix for the INT3472 clk provider:

https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=cf5ac2d45f6e4d11ad78e7b10ae9a4121ba5e995

"platform/x86: int3472/discrete: Ensure the clk/power enable pins are in output mode"

This patch is available since upstream kernel 6.1.7, so the new
code is only enabled for LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 7)

This allow susing the IPU6 sensor drivers with the upstream int3472
driver with unmodified upstream kernels >= 6.1.7 .

Signed-off-by: Hans de Goede <hdegoede@redhat.com>
---
 drivers/media/i2c/hm11b1.c  | 18 ++++++++++++++++++
 drivers/media/i2c/ov01a1s.c | 18 ++++++++++++++++++
 2 files changed, 36 insertions(+)

diff --git a/drivers/media/i2c/hm11b1.c b/drivers/media/i2c/hm11b1.c
index 1cc5cd761..e14810bdd 100644
--- a/drivers/media/i2c/hm11b1.c
+++ b/drivers/media/i2c/hm11b1.c
@@ -468,8 +468,13 @@ struct hm11b1 {
 	struct gpio_desc *reset_gpio;
 	/* GPIO for powerdown */
 	struct gpio_desc *powerdown_gpio;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 7)
 	/* GPIO for clock enable */
 	struct gpio_desc *clken_gpio;
+#else
+	/* Clock provider */
+	struct clk *clk;
+#endif
 	/* GPIO for privacy LED */
 	struct gpio_desc *pled_gpio;
 #endif
@@ -508,7 +513,14 @@ static void hm11b1_set_power(struct hm11b1 *hm11b1, int on)
 		return;
 	gpiod_set_value_cansleep(hm11b1->reset_gpio, on);
 	gpiod_set_value_cansleep(hm11b1->powerdown_gpio, on);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 7)
 	gpiod_set_value_cansleep(hm11b1->clken_gpio, on);
+#else
+	if (on)
+		clk_prepare_enable(hm11b1->clk);
+	else
+		clk_disable_unprepare(hm11b1->clk);
+#endif
 	gpiod_set_value_cansleep(hm11b1->pled_gpio, on);
 	msleep(20);
 #elif IS_ENABLED(CONFIG_POWER_CTRL_LOGIC)
@@ -1093,12 +1105,18 @@ static int hm11b1_parse_dt(struct hm11b1 *hm11b1)
 		return ret;
 	}
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 7)
 	hm11b1->clken_gpio = devm_gpiod_get(dev, "clken", GPIOD_OUT_HIGH);
 	ret = PTR_ERR_OR_ZERO(hm11b1->clken_gpio);
 	if (ret < 0) {
 		dev_err(dev, "error while getting clken_gpio gpio: %d\n", ret);
 		return ret;
 	}
+#else
+	hm11b1->clk = devm_clk_get_optional(dev, "clk");
+	if (IS_ERR(hm11b1->clk))
+		return dev_err_probe(dev, PTR_ERR(hm11b1->clk), "getting clk\n");
+#endif
 
 	hm11b1->pled_gpio = devm_gpiod_get(dev, "pled", GPIOD_OUT_HIGH);
 	ret = PTR_ERR_OR_ZERO(hm11b1->pled_gpio);
diff --git a/drivers/media/i2c/ov01a1s.c b/drivers/media/i2c/ov01a1s.c
index e4477625c..628a1dd83 100644
--- a/drivers/media/i2c/ov01a1s.c
+++ b/drivers/media/i2c/ov01a1s.c
@@ -317,8 +317,13 @@ struct ov01a1s {
 	struct gpio_desc *reset_gpio;
 	/* GPIO for powerdown */
 	struct gpio_desc *powerdown_gpio;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 7)
 	/* GPIO for clock enable */
 	struct gpio_desc *clken_gpio;
+#else
+	/* Clock provider */
+	struct clk *clk;
+#endif
 	/* GPIO for privacy LED */
 	struct gpio_desc *pled_gpio;
 #endif
@@ -339,7 +344,14 @@ static void ov01a1s_set_power(struct ov01a1s *ov01a1s, int on)
 		return;
 	gpiod_set_value_cansleep(ov01a1s->reset_gpio, on);
 	gpiod_set_value_cansleep(ov01a1s->powerdown_gpio, on);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 7)
 	gpiod_set_value_cansleep(ov01a1s->clken_gpio, on);
+#else
+	if (on)
+		clk_prepare_enable(ov01a1s->clk);
+	else
+		clk_disable_unprepare(ov01a1s->clk);
+#endif
 	gpiod_set_value_cansleep(ov01a1s->pled_gpio, on);
 	msleep(20);
 #elif IS_ENABLED(CONFIG_POWER_CTRL_LOGIC)
@@ -945,12 +957,18 @@ static int ov01a1s_parse_dt(struct ov01a1s *ov01a1s)
 		return -EPROBE_DEFER;
 	}
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 1, 7)
 	ov01a1s->clken_gpio = devm_gpiod_get(dev, "clken", GPIOD_OUT_HIGH);
 	ret = PTR_ERR_OR_ZERO(ov01a1s->clken_gpio);
 	if (ret < 0) {
 		dev_err(dev, "error while getting clken_gpio gpio: %d\n", ret);
 		return -EPROBE_DEFER;
 	}
+#else
+	ov01a1s->clk = devm_clk_get_optional(dev, "clk");
+	if (IS_ERR(ov01a1s->clk))
+		return dev_err_probe(dev, PTR_ERR(ov01a1s->clk), "getting clk\n");
+#endif
 
 	ov01a1s->pled_gpio = devm_gpiod_get(dev, "pled", GPIOD_OUT_HIGH);
 	ret = PTR_ERR_OR_ZERO(ov01a1s->pled_gpio);
-- 
2.39.1

